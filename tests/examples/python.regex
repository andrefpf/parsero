# Isso é um comentário

# Se o nome é igual a definição
# então essa é uma palavra reservada
as:as
assert:assert
break:break
raise:raise
yield:yield
return:return
class:class
continue:continue
pass:pass
def:def
del:del
with:with
if:if
elif:elif
else:else
for:for
while:while
in:in
try:try
except:except
None:None
True:True
False:False
int:int
float:float

# Expressões auxiliares
# estas expressões fazem parte das
# definições regulares de outras expressões
# portanto não serão criados autômatos finitos 
# para elas
digit: [0-9]
letter: [a-zA-Z]
acentuated: (á|à|â|ã|é|ê|í|ó|ô|ú|ü|ç|Á|À|Â|É|Ê|Í|Ó|Ô|Ú|Ü|Ç)
symbols: (_| |!|\=|\&|@|#|$|%|\&|\||\+|-|\&|\*|/|\\|\"|\.|,|\[|\]|\(|\)|\{|\}|\<|\>|:|;|\?|\^|\Σ|\→)
inside_string: (\w|\d|acentuated|symbols)
inside_comment: (inside_string|"|')
inside_multiline_comment: (inside_comment|\s)
sign: (\+|-)
decimal: (\.digit*)
scientific_notation: (e(\+|-)?digit+)

comparator: (==|!=|\<|\>|\<=|\>=)
operator: (\+|-|\*|/|//|\||\<\<|\>\>|\&)
atr: =
dot: \.
comma: ,
colon: :
identation: (    )
open_bracket: \(
close_bracket: \)
open_square_bracket: \[
close_square_bracket: \]
open_curly_bracket: \{
close_curly_bracket: \}

decorator: @(letter|_)(letter|digit|_)*
string: (f?"(inside_string|')*")|(f?'(inside_string|")*')
line_comment: #inside_comment*\n
multiline_comment: (f?"""inside_multiline_comment*""")|(f?'''inside_multiline_comment*''')
number: (sign?)(digit+)(decimal?)(scientific_notation?)
id: (letter|_)(letter|digit|_)*
