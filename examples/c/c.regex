# Isso é um comentário

# Se o nome é igual a definição
# então essa é uma palavra reservada
if:if
else:else
while:while
for:for
int:int
long:long
short:short
float:float
bool:bool
return:return
break:break
struct:struct
char:char

# Expressões auxiliares
# estas expressões fazem parte das
# definições regulares de outras expressões
# portanto não serão criados autômatos finitos 
# para elas
digit: [0-9]
letter: [a-zA-Z]
symbols: (_| |!|\=|\&|@|#|$|%|\&|\||\+|-|\&|\*|/|\\|\"|\.|,|\[|\]|\(|\)|\{|\}|\<|\>|:|;|\?|\^|\Σ|\→)
inside_string: (\w|\d|symbols)
inside_comment: (inside_string|")
inside_multiline_comment: (inside_comment|\s)
sign: (\+|-)
decimal: (\.digit*)
scientific_notation: (e(\+|-)?digit+)

comparator: (==|!=|\<|\>|\<=|\>=)
operator: (\+|-|\*|/|\||\<\<|\>\>)
increment: (\+\+|\-\-)
atr: (=|\+=|\-=|\*=)
dot: \.
comma: ,
colon: :
semicolon: ;
backslash: \\
open_bracket: \(
close_bracket: \)
open_square_bracket: \[
close_square_bracket: \]
open_curly_bracket: \{
close_curly_bracket: \}

package: \<inside_string*\>
macro: #letter(letter|digit|_)*
string: "inside_string*"
chars: 'inside_string'
line_comment: //inside_comment*\n
multiline_comment: /\*inside_multiline_comment*\*/
number: (sign?)(digit+)(decimal?)(scientific_notation?)
id: letter(letter|digit|_)*
